version: 2

jobs:
  checkout-code:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - checkout
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - save_cache:
          key: v5-repo-{{ checksum ".circle-sha" }}
          paths:
            - /go/src/github.com/SingularityInteractive/cohesiv
  install-cli:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - run:
          name: Install Cli
          command: ./installCli.sh && cp $GOPATH/bin/cohesiv /usr/local/bin
      - save_cache:
          key: v5-cli-{{ checksum "cli/version.go" }}
          paths:
            - /usr/local/bin/cohesiv
  install-cohesiv-golang-dependencies:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Get dep tool
          command: go get -u github.com/golang/dep/cmd/dep && go install github.com/golang/dep/cmd/dep
      - run:
          name: Install go deps
          command: dep ensure
      - save_cache:
          key: v5-cohesiv-vendor-{{ checksum "Gopkg.toml" }}
          paths:
            - vendor
  install-cohesiv-node-dependencies:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-node_modules-{{ checksum "package.json" }}
      - run:
          name: Install node deps
          command: yarn --pure-lockfile
      - save_cache:
          key: v5-cohesiv-node_modules-{{ checksum "package.json" }}
          paths:
            - node_modules
  install-client-dependencies:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-client-node_modules-{{ checksum "client/package.json" }}
      - run:
          name: Install node deps
          command: cd client && yarn --pure-lockfile
      - save_cache:
          key: v5-client-node_modules-{{ checksum "client/package.json" }}
          paths:
            - ./client/node_modules
  build-cohesiv-go:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Build Golang Services
          command: make binaries
      - save_cache:
          key: v5-cohesiv-go-build-{{ checksum ".circle-sha" }}
          paths:
            - ./gopath/bin
  build-cohesiv-node:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-node_modules-{{ checksum "package.json" }}
      - run:
          name: Build TS Services
          command: make tsc
      - save_cache:
          key: v5-cohesiv-node-build-{{ checksum ".circle-sha" }}
          paths:
            - ./access/dist
  build-clients:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-client-node_modules-{{ checksum "client/package.json" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - run:
          name: Build all clients
          command: cohesiv -c mypds build
      - save_cache:
          key: v5-client-builds-{{ checksum ".circle-sha" }}
          paths:
            - ./client/builds
  test-clients:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-client-builds-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-client-node_modules-{{ checksum "package.json" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - run:
          name: Test Clients
          command: cohesiv -c mypds test server
  deploy-cohesiv-develop:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get develop cluster credentials
          command: |
            kops get cluster --name=develop.cohesiv.io
            kops export kubecfg --name=develop.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:develop/:$CIRCLE_SHA1/g" kube/develop/deployment.yaml
            make authorize-develop-circle-ip
            kubectl apply -f kube/develop
            make deauthorize-develop-circle-ip
  deploy-cohesiv-staging:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get staging cluster credentials
          command: |
            kops get cluster --name=staging.cohesiv.io
            kops export kubecfg --name=staging.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:staging/:$CIRCLE_SHA1/g" kube/staging/deployment.yaml
            make authorize-staging-circle-ip
            kubectl apply -f kube/staging
            make deauthorize-staging-circle-ip
  deploy-cohesiv-production:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get production cluster credentials
          command: |
            kops get cluster --name=cohesiv.io
            kops export kubecfg --name=cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:master/:$CIRCLE_SHA1/g" kube/staging/deployment.yaml
            make authorize-master-circle-ip
            kubectl apply -f kube/production
            make deauthorize-master-circle-ip
  deploy-all-clients-develop:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - restore_cache:
          keys:
            - v5-client-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker image
          command: cohesiv -c mypds build docker
      - run:
          name: Generate k8s configs
          command: cohesiv -c mypds -t develop generate
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cohesiv -c mypds deploy docker
      - run:
          name: Get client develop cluster credentials
          command: |
            kops get cluster --name=develop.cohesiv.io
            kops export kubecfg --name=develop.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:develop/:$CIRCLE_SHA1/g" client/kube/develop/deployment.yaml
            make authorize-develop-circle-ip
            cohesiv -c mypds -t develop deploy k8s
            make deauthorize-develop-circle-ip
  deploy-all-clients-staging:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - restore_cache:
          keys:
            - v5-client-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker image
          command: cohesiv -c mypds build docker
      - run:
          name: Generate k8s configs
          command: cohesiv -c mypds -t staging generate
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cohesiv -c mypds deploy docker
      - run:
          name: Get client staging cluster credentials
          command: |
            kops get cluster --name=staging.cohesiv.io
            kops export kubecfg --name=staging.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:staging/:$CIRCLE_SHA1/g" client/kube/staging/deployment.yaml
            make authorize-staging-circle-ip
            cohesiv -c mypds -t staging deploy k8s
            make deauthorize-staging-circle-ip
  deploy-all-clients-production:
    docker:
      - image: singularityinteractive/cohesiv-ci:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          command: |
            export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
            export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
            export AWS_REGION=${AWS_DEFAULT_REGION}
            export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v5-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v5-cli-{{ checksum "cli/version.go" }}
      - restore_cache:
          keys:
            - v5-client-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker image
          command: cohesiv -c mypds build docker
      - run:
          name: Generate k8s configs
          command: cohesiv -c mypds -t master generate
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cohesiv -c deploy docker
      - run:
          name: Get client production cluster credentials
          command: |
            kops get cluster --name=cohesiv.io
            kops export kubecfg --name=cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:master/:$CIRCLE_SHA1/g" client/kube/production/deployment.yaml
            make authorize-master-circle-ip
            cohesiv -c mypds -t master deploy k8s
            make deauthorize-master-circle-ip
workflows:
  version: 2
  cohesiv-build-and-deploy:
    jobs:
      - checkout-code
      - install-cohesiv-node-dependencies:
          requires:
            - checkout-code
      - install-cohesiv-golang-dependencies:
          requires:
            - checkout-code
      - build-cohesiv-node:
          requires:
            - install-cohesiv-node-dependencies
      - build-cohesiv-go:
          requires:
            - install-cohesiv-golang-dependencies
      - deploy-cohesiv-develop:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: develop
      - deploy-cohesiv-staging:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: staging
      - deploy-cohesiv-production:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: master
  client-build-and-deploy:
    jobs:
      - checkout-code
      - install-client-dependencies:
          requires:
            - checkout-code
      - build-clients:
          requires:
            - install-client-dependencies
      - test-clients:
          requires:
            - build-clients
      - deploy-all-clients-develop:
          requires:
            - build-clients
          filters:
            branches:
              only: develop
      - deploy-all-clients-staging:
          requires:
            - build-clients
          filters:
            branches:
              only: staging
      - deploy-all-clients--production:
          requires:
            - build-clients
          filters:
            branches:
              only: master