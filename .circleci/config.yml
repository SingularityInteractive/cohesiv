version: 2

jobs:
  checkout-code:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - checkout
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - save_cache:
          key: v4-repo-{{ checksum ".circle-sha" }}
          paths:
            - /go/src/github.com/SingularityInteractive/cohesiv
  install-cohesiv-golang-dependencies:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Get dep tool
          command: go get -u github.com/golang/dep/cmd/dep && go install github.com/golang/dep/cmd/dep
      - run:
          name: Install go deps
          command: dep ensure
      - save_cache:
          key: v4-cohesiv-vendor-{{ checksum "Gopkg.toml" }}
          paths:
            - vendor
  install-cohesiv-node-dependencies:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-node_modules-{{ checksum "package.json" }}
      - run:
          name: Install node deps
          command: yarn --pure-lockfile
      - save_cache:
          key: v4-cohesiv-node_modules-{{ checksum "package.json" }}
          paths:
            - node_modules
  install-mypds-dependencies:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-node_modules-{{ checksum "package.json" }}
      - run:
          name: Install node deps
          command: cd mypds && yarn --pure-lockfile
      - save_cache:
          key: v4-mypds-node_modules-{{ checksum "package.json" }}
          paths:
            - ./mypds/node_modules
  build-cohesiv-go:
    docker:
      - image: circleci/golang:latest
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-vendor-{{ checksum "Gopkg.toml" }}
      - run:
          name: Build Golang Services
          command: make binaries
      - save_cache:
          key: v4-cohesiv-go-build-{{ checksum ".circle-sha" }}
          paths:
            - ./gopath/bin
  build-cohesiv-node:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-node_modules-{{ checksum "package.json" }}
      - run:
          name: Build TS Services
          command: yarn access:build
      - save_cache:
          key: v4-cohesiv-node-build-{{ checksum ".circle-sha" }}
          paths:
            - ./access/dist
  build-mypds:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-node_modules-{{ checksum "package.json" }}
      - run:
          name: Build Web
          command: cd mypds && yarn build:web
      - run:
          name: Build TS Server
          command: cd mypds && yarn build:server
      - save_cache:
          key: v4-mypds-build-{{ checksum ".circle-sha" }}
          paths:
            - ./mypds/server/dist
            - ./mypds/public
  test-mypds:
    docker:
      - image: node:8
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-node_modules-{{ checksum "package.json" }}
      - run:
          name: Test TS Server
          command: cd mypds && yarn test:server
  deploy-cohesiv-develop:
    docker:
      - image: sammccord/kops-docker
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
        command: |
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_DEFAULT_REGION}
          export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get develop cluster credentials
          command: |
            kops get cluster --name=develop.cohesiv.io
            kops export kubecfg --name=develop.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:latest/:$CIRCLE_SHA1/g" kube/develop/deployment.yaml
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.config
            make authorize-develop-circle-ip
            kubectl apply -f kube/develop
            make deauthorize-develop-circle-ip
  deploy-cohesiv-staging:
    docker:
      - image: sammccord/kops-docker
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
        command: |
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_DEFAULT_REGION}
          export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get staging cluster credentials
          command: |
            kops get cluster --name=staging.cohesiv.io
            kops export kubecfg --name=staging.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:latest/:$CIRCLE_SHA1/g" kube/staging/deployment.yaml
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.config
            make authorize-staging-circle-ip
            kubectl apply -f kube/staging
            make deauthorize-staging-circle-ip
  deploy-cohesiv-production:
    docker:
      - image: sammccord/kops-docker
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
        command: |
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_DEFAULT_REGION}
          export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-go-build-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-cohesiv-node-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker images
          command: make docker-images
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            make docker-push-ecr
      - run:
          name: Get production cluster credentials
          command: |
            kops get cluster --name=cohesiv.io
            kops export kubecfg --name=cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.config
            make authorize-master-circle-ip
            kubectl apply -f kube/production
            make deauthorize-master-circle-ip
  deploy-mypds-staging:
    docker:
      - image: sammccord/kops-docker
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
        command: |
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_DEFAULT_REGION}
          export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker image
          command: cd mypds && make docker-image
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cd mypds && make docker-push-ecr
      - run:
          name: Get mypds staging cluster credentials
          command: |
            kops get cluster --name=staging.cohesiv.io
            kops export kubecfg --name=staging.cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sed -i "s/:latest/:$CIRCLE_SHA1/g" mypds/kube/staging/deployment.yaml
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.config
            make authorize-staging-circle-ip
            node_modules/.bin/sequelize db:migrate --url ${STAGING_DB_CONNECTION_STRING}
            kubectl apply -f mypds/kube/staging
            make deauthorize-staging-circle-ip
  deploy-mypds-production:
    docker:
      - image: sammccord/kops-docker
    working_directory: /go/src/github.com/SingularityInteractive/cohesiv
    steps:
      - run:
        command: |
          export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
          export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
          export AWS_REGION=${AWS_DEFAULT_REGION}
          export KOPS_STATE_STORE=${KOPS_STATE_STORE}
      - setup_remote_docker
      - run:
          name: save SHA to a file
          command: echo $CIRCLE_SHA1 > .circle-sha
      - restore_cache:
          keys:
            - v4-repo-{{ checksum ".circle-sha" }}
      - restore_cache:
          keys:
            - v4-mypds-build-{{ checksum ".circle-sha" }}
      - run:
          name: Build docker image
          command: cd mypds && make docker-image
      - run:
          name: Push to ecr
          command: |
            eval $(aws ecr get-login --region ${AWS_DEFAULT_REGION} --no-include-email)
            cd mypds && make docker-push-ecr
      - run:
          name: Get mypds production cluster credentials
          command: |
            kops get cluster --name=cohesiv.io
            kops export kubecfg --name=cohesiv.io --state=${KOPS_STATE_STORE}
      - run:
          name: Deploy
          command: |
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.kube
            sudo chown -R ubuntu:ubuntu /home/ubuntu/.config
            make authorize-master-circle-ip
            node_modules/.bin/sequelize db:migrate --url ${PRODUCTION_DB_CONNECTION_STRING}
            kubectl apply -f mypds/kube/production
            make deauthorize-master-circle-ip
workflows:
  version: 2
  cohesiv-build-and-deploy:
    jobs:
      - checkout-code
      - install-cohesiv-node-dependencies:
          requires:
            - checkout-code
      - install-cohesiv-golang-dependencies:
          requires:
            - checkout-code
      - build-cohesiv-node:
          requires:
            - install-cohesiv-node-dependencies
      - build-cohesiv-go:
          requires:
            - install-cohesiv-golang-dependencies
      - deploy-cohesiv-develop:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: develop
      - deploy-cohesiv-staging:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: staging
      - deploy-cohesiv-production:
          requires:
            - build-cohesiv-go
            - build-cohesiv-node
          filters:
            branches:
              only: master
  # mypds-build-and-deploy:
  #   jobs:
  #     - checkout-code
  #     - install-mypds-dependencies:
  #         requires:
  #           - checkout-code
  #     - build-mypds:
  #         requires:
  #           - install-mypds-dependencies
  #     - test-mypds:
  #         requires:
  #           - build-mypds
  #     - build-mypds-docker-image:
  #         requires:
  #           - build-mypds
  #         filters:
  #           branches:
  #             only:
  #               - staging
  #               - master
  #     - deploy-mypds-staging:
  #         requires:
  #           - build-mypds-docker-image
  #         filters:
  #           branches:
  #             only: staging
  #     - deploy-mypds-production:
  #         requires:
  #           - build-mypds-docker-image
  #         filters:
  #           branches:
  #             only: master