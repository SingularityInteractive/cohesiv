apply plugin: 'com.android.application'
android {
  compileSdkVersion 25
  buildToolsVersion '25.0.2'
  String client = getClient()
  defaultConfig {
    applicationId "com.github.SingularityInteractive.${client}"
    printf("android identifier: %s\n", applicationId)
    resValue("string","app_name", "${client}")
    minSdkVersion 19
    targetSdkVersion 25
    versionCode 1
    versionName "1.0"
    multiDexEnabled true
    ndk {
      abiFilters 'armeabi-v7a', 'x86'
    }
    manifestPlaceholders = [
      'appAuthRedirectScheme': "com.github.SingularityInteractive.${client}"
    ]
  }
  buildTypes {
    release {
      minifyEnabled false
      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
    }
  }

  sourceSets {
    main.res.srcDirs += "../../variants/${client}/android/res"
    main.java.srcDirs += "../../variants/${client}/android/java"
    printf("res dirs: %s\n", main.res.srcDirs)
  }

  dexOptions {
    javaMaxHeapSize "8g"
  }
  lintOptions {
    abortOnError false
  }
}

def String getClient() {
  def String client = System.getenv('CLIENT')
  if (!client) {
    client = 'cohesiv'
  }
  return client
}

task exponentPrebuildStep(type: Exec) {
  workingDir '../../'

  if (System.getProperty('os.name').toLowerCase().contains('windows')) {
    commandLine 'cmd', '/c', '.\\.expo-source\\android\\detach-scripts\\prepare-detached-build.bat'
  } else {
    commandLine './.expo-source/android/detach-scripts/prepare-detached-build.sh'
  }
}
preBuild.dependsOn exponentPrebuildStep

repositories{
  flatDir{
    dirs 'libs'
  }
  mavenLocal()
  maven { url 'https://maven.fabric.io/public' }
}

dependencies {
  compile fileTree(dir: 'libs', include: ['*.jar'])
  testCompile 'junit:junit:4.12'
  compile 'com.android.support:appcompat-v7:25.3.1'
  compile 'com.android.support:multidex:1.0.1'

  
  compile('host.exp.exponent:expoview:20.0.0@aar') {
    exclude group: 'com.facebook.android', module: 'facebook-android-sdk'
    exclude group: 'com.facebook.android', module: 'audience-network-sdk'
    exclude group: 'io.nlopez.smartlocation', module: 'library'
    transitive = true;
  }

  compile ('com.facebook.android:facebook-android-sdk:4.7.0') {
    exclude module: 'bolts-android'
  }
  compile('com.facebook.android:audience-network-sdk:4.19.0') {
    exclude module: 'play-services-ads'
  }
  compile('io.nlopez.smartlocation:library:3.2.11') {
    transitive = false
  }
}
allprojects {
  afterEvaluate { project ->
    def propsFile = rootProject.file('keystore.properties')
    def configName = 'config'

    if (propsFile.exists() && android.signingConfigs.hasProperty(configName)) {
      def props = new Properties()
      props.load(new FileInputStream(propsFile))
      android.signingConfigs[configName].storeFile = file(props['storeFile'])
      android.signingConfigs[configName].storePassword = props['storePassword']
      android.signingConfigs[configName].keyAlias = props['keyAlias']
      android.signingConfigs[configName].keyPassword = props['keyPassword']
    }
  }
}
